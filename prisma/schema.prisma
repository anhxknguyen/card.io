// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [userId])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  userId        String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  studySets     StudySet[] @relation("UserStudySets")
  accounts      Account[]
  sessions      Session[]
}

model StudySet {
  setId      String      @id @default(uuid())
  title      String
  user       User        @relation("UserStudySets", fields: [userId], references: [userId])
  userId     String
  flashcards Flashcard[] @relation("StudySetFlashcards")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Flashcard {
  cardId     String   @id @default(uuid())
  title      String
  definition String
  studySet   StudySet @relation("StudySetFlashcards", fields: [studySetId], references: [setId])
  studySetId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
